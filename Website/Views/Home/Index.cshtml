@{
    ViewBag.Title = "Home Page";
}

<!-- view anchor -->

<div id="viewport" class="row wrapper">

</div>

<!-- Sample ui states -->

<script type="text/html" id="Ready">
    <Button class="btn fa" data-bind="click: StartSomeProcess">Start new</Button>
    <span data-bind="text: TimeLapsed"></span>
</script>

<script type="text/html" id="Loading">
    Loading please wait.
</script>

<script type="text/html" id="Busy">
    Busy come back later.
</script>

<script type="text/html" id="Disconnected">
    Another window is open.
</script>

@section scripts
{
    <script src="~/Scripts/knockout-3.4.2.js"></script>
    <script src="~/Scripts/Custom/BaseViewModel.js"></script>
    <script src="~/Scripts/jquery.s-2.3.0.js"></script>

    <!--Reference the autogenerated SignalR hub script. -->
    <!-- 
        Url rewrite in web.config,
        prod you may want this endpoint loadbalanced https://codeopinion.com/practical-asp-net-core-signalr-scaling/
        -->

    <script src="http://localhost:8080/signalr/hubs"></script>

    <script type="text/javascript">

        var hubSettings = {
            hub: $.connection.uINotificationHub,
            url: 'http://localhost:8080/signalr/hubs'
        }

        var hubConnection = {
            hub: hubSettings.hub,
            isConnected: function () {
                return $.connection.hub.state == $.signalR.connectionState.connected
            },
            commands: hubSettings.hub.server,
            events: hubSettings.hub.client
        }

        $(document).ready(function () {
            $.connection.hub.url = hubSettings.url;
            if (!hubConnection.isConnected()) {

                hubConnection.events.notify = function (id, state, data) {
                    $("body").trigger('signalr-update-' + id, [state, data]);
                };

                $.connection.hub.start().done(function () {
                    $("body").trigger('connection.ready');
                });
            }
        });



        ViewModel = function(name, defaultState) {

            var self = this;
            self.state = ko.observable(defaultState); // string as current state which relates to template id.
            self.name = name;

            //id of view model assuming scope to local storage, could be a table
            self.id = localStorage.getItem(name);
            if (self.id == null) {
                self.id = guid();
                localStorage.setItem(name, self.id);
            }
            console.log("my name is => " + name + ", Id => " + self.id);

            self.assignState = function (state, assignedFn) {

                hubConnection.commands.assignState(self.id, state)
                    .done(function(state) {
                        self.state(state);
                        if (assignedFn)
                            assignedFn();
                    });
            }

            self.OnDataUpdate = function (state, data) {
                //Implement this in viewmodel
            }

            $("body").on('signalr-update-' + self.id,
                function (ev, state, data) {
                    if (state != self.state()) self.state(state);
                    if (data) {
                        self.OnDataUpdate(state, data);
                    }
                });


            return self;
        }

        //Sample viewmodel for a business process.
        var BusinessProcess = function (name) {

            var self = new ViewModel(name, "Loading");

            self.TimeLapsed = ko.observable();

            self.OnDataUpdate = function (state, data) {
                if (state == "Ready")
                    self.TimeLapsed(data);
            }

            self.StartSomeProcess = function () {
                self.assignState("Busy", function () {
                    $.ajax({
                        type: 'post',
                        url: '@Url.Action("StartSomeProcess")',
                        data: JSON.stringify({
                                id: self.id
                        }),
                        contentType: "application/json; charset=utf-8",
                        traditional: true,
                        error: function () {
                            view.assignState("Ready");
                        }
                    });
                });
            }
            return self;
        };

        $(document).ready(function() {
            var i = 0;

            $("body").on('connection.ready', function () {

                var createViewModel = function () {
                    i++;
                    var viewModel = new BusinessProcess(i);

                    $('#viewport').append($('<div id="container-' + viewModel.id + '"><div data-bind="dynaTemplate: state"></div></div>'));
                    var $vm = $('#container-' + viewModel.id);

                    ko.applyBindings(viewModel, $vm.get(0));
                    viewModel.assignState(null);
                    localStorage.setItem("loaded", i);

                    return viewModel;
                }

                for (var b = 0; b < 5; b++) {
                    createViewModel();
                }
            });

        });

    </script>

}